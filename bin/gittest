#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'gittest'

options = {:commit => 'HEAD'}
OptionParser.new do |opts|
  opts.banner = "Usage: gittest [options]"
  opts.on("-c MANDATORY", "--commit MANDATORY", "Commit argument for git diff command used to check for new or modified files (defaults to HEAD)") do |o|
    options[:commit] = o
  end
  opts.on("-l", "--load", "Run pending migrations and load test database from schema before running tests (Rails only)") do |o|
    options[:load] = o
  end
  opts.on("-p", "--prepare", "Purge test database and re-create by running all migrations before running tests (Rails only)") do |o|
    options[:prepare] = o
  end
  opts.on("-t", "--trace", "Enable full backtrace on exception") do |o|
    options[:trace] = o
  end
  opts.on("--version", "Show version info and exit") do |o|
    puts "gittest version " + Gittest::VERSION
    exit
  end
end.parse!

# create an instance of Gittest to do the dirty work
begin
  gt = Gittest.new(options[:commit])
rescue LoadError => e
  puts "LoadError: #{e.message}, exiting"
  if options[:trace]
    puts e.backtrace
  else
    puts "(see full trace by running command with --trace option)"
  end
  exit 1
end

rake_options = options[:trace] ? '--trace' : ''
if options[:prepare]
  puts "Preparing test database..."
  exit $?.exitstatus unless system "rake db:test:purge #{rake_options}"
  exit $?.exitstatus unless system "rake db:migrate RAILS_ENV=test #{rake_options}"
end
if options[:load]
  puts "Loading test database..."
  exit $?.exitstatus unless system "rake db:migrate RAILS_ENV=test #{rake_options}"
  exit $?.exitstatus unless system "rake db:test:load #{rake_options}"
end

# look for modified files
if gt.new_or_modified_files.empty?
  puts "No modified files, exiting"
  exit
end
msg = "#{gt.new_or_modified_files.size} new or modified file" 
msg << "s" unless gt.new_or_modified_files.size == 1
puts msg + ":"
gt.new_or_modified_files.each {|f| puts "\t#{f}"}

# look for files to test
if gt.files_to_test.empty?
  puts "No matching files to test, exiting"
  exit 
end
msg = "#{gt.files_to_test.size} file" 
msg << "s" unless gt.files_to_test.size == 1
msg << " to test"
puts msg + ":"
puts "\t" + gt.files_to_test.map{|k,v| k}.sort.join("\n\t")

# give user an option to quit now, before running the tests/specs
puts "Press ENTER to continue, or CTRL+C to quit"
begin
  $stdin.gets # note: Kernel#gets assumes that ARGV contains a list of files from which to read next line
rescue Interrupt
  exit
end

# run those tests baby
puts "Running tests and/or specs, please wait..." 
gt.run_tests

